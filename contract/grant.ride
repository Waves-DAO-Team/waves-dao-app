{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}


let QUORUM = 1  # 50% votes needed

func tryGetInteger(key: String) = {
    let val = match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
    val
}

func tryGetString(key: String) = {
    let val = match getString(this, key) {
        case b:String => b
        case _ => ""
    }
    val
}

func isOwner(address: Address) = {
    address == this
}

func getGroup() = {
    let val = match getString(this, "working_group") {
        case b:String => b
        case _ => ""
    }
    val
}

func getMembers() = {
    let val = match getString(this, "dao_members") {
        case b:String => b
        case _ => ""
    }
    val
}

func isGroupMember(a: Address) = {
    # Grants & Funding group membership check
    tryGetInteger("working_group_member_"+a.toString()+"_weight") > 0
}


func canMemberVote(i: Invocation) = {
    # DAO membership check
    tryGetInteger("dao_member_"+i.caller.toString()+"_weight") > 0
}


@Callable(i)
func addDAOMember(memberAddress: String) = {
    if (!isOwner(i.caller)) then {
        throw("access only to the DAO owner")
    } else {
        if (tryGetInteger("dao_member_"+memberAddress+"_weight") == 1) then {
            throw("this user already exists")
        } else {
            let group = getMembers()
            let newGroup = group + ";" + memberAddress

            let groupSize = tryGetInteger("dao_size")
            let newGroupSize = groupSize + 1

            WriteSet([
                # Parsed in dAPP to dao.members -> list (separator ;)
                DataEntry("dao_members", newGroup),

                # Parsed in dAPP to dao.size
                DataEntry("dao_size", newGroupSize),

                # Parsed in dAPP to dao.member[id].weight
                DataEntry("dao_member_"+memberAddress+"_weight", 1)
            ])
        }
    }
}


@Callable(i)
func addGroupMember(memberAddress: String) = {
    if (!isOwner(i.caller)) then {
        throw("access only to the DAO owner")
    } else {
        if (tryGetInteger("working_group_member_"+memberAddress+"_weight") == 1) then {
            throw("This user already exists")
        } else {
            let group = getGroup()
            let newGroup = group + ";" + memberAddress

            let groupSize = tryGetInteger("working_group_size")
            let newGroupSize = groupSize + 1

            WriteSet([
                # Parsed in dAPP to working.group.name -> list (separator ;)
                DataEntry("working_group_members", newGroup),

                # Parsed in dAPP to working.group.size
                DataEntry("working_group_size", newGroupSize),

                # Parsed in dAPP to working.group.member[id].weight
                DataEntry("working_group_member_"+memberAddress+"_weight", 1)
            ])
        }
    }
}


@Callable(i)
func addTask(title: String, link: String) = {
    if (!(isGroupMember(i.caller))) then {
        throw("grants working group access only")
    } else {
        # Parsed in dAPP to tasks[id].title
        WriteSet([
            DataEntry("tasks_" + i.transactionId.toBase58String() + "_title", title),
            DataEntry("tasks_" + i.transactionId.toBase58String() + "_link", link)
        ])  # title, description
    }
}


@Callable(i)
func addTaskDetails(taskId: String) = {
    # will also contain task description / requirements / reward payment model
    if (!(isGroupMember(i.caller))) then {
        throw("grants working group access only")
    } else {
        let reward = i.payment.extract().amount
        WriteSet([
            # Parsed in dAPP to tasks[id].reward
            DataEntry("tasks_"+taskId+"_reward", reward),

            # Parsed in dAPP to tasks[id].status
            DataEntry("tasks_"+taskId+"_status", "proposed")
        ])
    }
}


@Callable(i)
func voteForTaskProposal(taskId: String, voteValue: String) = {
    # vote value: like or dislike
    if (!canMemberVote(i)) then {
        throw("you can't vote")
    } else {
        if (getStringValue(this, "tasks_"+taskId+"_status") != "proposed") then {
            throw("voting is closed or not started")
        } else {
            if (voteValue != "like" && voteValue != "dislike") then {
                throw("you need to vote like or dislike")
            } else {
                func getValue(vote: String) = {
                    if (vote == "like") then {1} else {-1}
                }
                # Parsed in dAPP to tasks[id].voted[userId] -> integer
                let voteKey = "tasks_"+taskId+"_voted_"+i.caller.toString()
                let previousVote = tryGetInteger(voteKey)

                if (!(previousVote == 0)) then {
                    throw("you have already voted")
                } else {
                    # Parsed in dAPP to tasks[id].voting.state -> integer
                    let votingKey = "tasks_"+taskId+"_voting_state"
                    let votingState = tryGetInteger(votingKey)

                    # Parsed in dAPP to tasks[id].voting.amount -> integer
                    let votesAmountKey = "tasks_"+taskId+"_voting_amount"
                    let votesAmountState = tryGetInteger(votingKey) + 1

                    let newVotingState = votingState + getValue(voteValue)
                    ScriptResult(
                        WriteSet([
                            DataEntry(votingKey, newVotingState),
                            DataEntry(voteKey, getValue(voteValue)),
                            DataEntry(votesAmountKey, votesAmountState)
                        ])
                        , TransferSet([
                            ScriptTransfer(i.caller, 500000, unit)
                        ])
                    )
                }
            }
        }
    }
}


@Callable(i)
func finishTaskProposalVoting(taskId: String) = {
    if ((tryGetInteger("tasks_"+taskId+"_voting_amount") * 100) / tryGetInteger("dao_size") < QUORUM) then {
        throw("more than " + QUORUM.toString() + "% members have to vote before finishing the voting")
    } else {
        if (!(isGroupMember(i.caller))) then {
            throw("grants working group access only")
        } else {
            # Parsed in dAPP to tasks[id].voting.state -> integer
            let votingKey = "tasks_"+taskId+"_voting_state"
            let votingState = tryGetInteger(votingKey)

            if (votingState > 0) then {
                let votingResult = "ready_to_apply"
                WriteSet([
                    # Parsed in dAPP to tasks[id].status -> string
                    DataEntry("tasks_" + taskId + "_status", votingResult)
                ])
            } else {
                let votingResult = "rejected"
                WriteSet([
                    # Parsed in dAPP to tasks[id].status -> string
                    DataEntry("tasks_" + taskId + "_status", votingResult)
                ])
            }
        }
    }
}


@Callable(i)
func applyForTask(taskId: String, teamName: String, link: String) = {
    let status = tryGetString("tasks_" + taskId + "_status")

    if (status != "ready_to_apply") then {
        throw("this grant has not yet been approved")
    } else {
        let applicantKey = drop(i.caller.toString(), 20)

        if (tryGetString("tasks_"+taskId+"_app_"+applicantKey+"_name") == teamName) then {
            throw("commnad with name is exist")
        } else {
            # this func also will operate with teamDesc, requestedReward, etc
            let listKey = "tasks_"+taskId+"_applicants"
            let currentApplicantsList = tryGetString(listKey)

            # Use address leader as identifier team
            let newApplicantsList = currentApplicantsList+";"+i.caller.toString()
            WriteSet([
                # Parsed in dAPP to tasks[id].app[id].name -> string
                DataEntry("tasks_"+taskId+"_app_"+applicantKey+"_name", teamName),
                DataEntry("tasks_"+taskId+"_app_"+applicantKey+"_link", link),

                # Parsed in dAPP to tasks[id].app[id].leader -> id
                DataEntry("tasks_"+taskId+"_app_"+applicantKey+"_leader", i.caller.toString()),

                # Parsed in dAPP to tasks[id].app[id].id -> key
                DataEntry("tasks_"+taskId+"_app_"+applicantKey+"_id", applicantKey),

                # Parsed in dAPP to tasks[id].apps -> list id (separator ;)
                DataEntry(listKey, newApplicantsList)
            ])
        }
    }
}


@Callable(i)
func voteForApplicant(taskId: String, teamIdentifier: String, voteValue: String) = {
    if (!canMemberVote(i)) then {
        throw("you can't vote")
    } else {
        if (tryGetString("tasks_"+taskId+"_status") != "ready_to_apply") then {
            throw("voting is closed or not started")
        } else {
            if (tryGetString("tasks_"+taskId+"_app_"+teamIdentifier+"_id") != teamIdentifier) then {
                throw("team is not found use id team on application")
            } else {
                if (voteValue != "like" && voteValue != "dislike") then {
                    throw("you need to vote like or dislike")
                } else {
                    func getValue(vote: String) = {
                        if (vote == "like") then {1} else {-1}
                    }
                    # Parsed in dAPP to tasks[id].vote[meId][teamId] -> boolean
                    let listKey = "tasks_"+taskId+"_app_"+teamIdentifier+"_voted"
                    let newApplicantsList = tryGetString(listKey)+";"+i.caller.toString()
                    let voteHash = drop(i.caller.toString(), 20) + drop(teamIdentifier, 20)
                    let voteKey = "tasks_"+taskId+"_vh_"+voteHash

                    if (tryGetString(voteKey) == i.caller.toString()) then {
                        throw("you have already voted on this team")
                    } else {
                        let teamVotesAmountKey = "tasks_"+taskId+"_app_"+teamIdentifier+"_votes"
                        let teamScoreKey = "tasks_"+taskId+"_app_"+teamIdentifier+"_score"
                        let teamVotesAmount = 1 + tryGetInteger(teamVotesAmountKey)
                        let newTeamScore = getValue(voteValue) + tryGetInteger(teamScoreKey)
                        WriteSet([
                            # Parsed in dAPP to tasks[id].app[teamId].votes -> integer
                            DataEntry(listKey, newApplicantsList),
                            DataEntry(voteKey, i.caller.toString()),
                            DataEntry(teamVotesAmountKey, teamVotesAmount),
                            # Parsed in dAPP to tasks[id].app[teamId].score -> integer
                            DataEntry(teamScoreKey, newTeamScore)
                        ])
                    }
                }
            }
        }
    }
}


@Callable(i)
func finishApplicantsVoting(taskId: String) = {
    # filter second

    func isApplicantVotedEnough(aid: Int, aid2: Int) = {
        let listKey = "tasks_"+taskId+"_applicants"
        let applicantsList = getStringValue(this, listKey).split(";")
        let teamIdentifier = applicantsList[aid]

        let teamVotesAmountKey = "tasks_"+taskId+"_app_"+teamIdentifier+"_votes"
        let teamVotesAmount = tryGetInteger(teamVotesAmountKey)
        if (teamVotesAmount > 0) then {
            1
        } else {
            throw("not enough votes to make decision on " + teamIdentifier)
        }
    }
    func hasMoreVotes(aid: Int, aid2: Int) = {
        let listKey = "tasks_"+taskId+"_applicants"
        let applicantsList = getStringValue(this, listKey).split(";")
        let teamIdentifier = applicantsList[aid]
        let teamVotesAmountKey = "tasks_"+taskId+"_app_"+teamIdentifier+"_votes"
        let teamVotesAmount = tryGetInteger(teamVotesAmountKey)

        let team2Identifier = applicantsList[aid2]
        let team2VotesAmountKey = "tasks_"+taskId+"_app_"+team2Identifier+"_votes"
        let team2VotesAmount = tryGetInteger(team2VotesAmountKey)

        if (teamVotesAmount > team2VotesAmount) then {
            aid
        } else {
            aid2
        }
    }

    if (!(isGroupMember(i.caller))) then {
        throw("grants working group access only")
    } else {

        let listKeys = tryGetString("tasks_" + taskId + "_applicants")
        let applicantsList = listKeys.split(";")

        if (size(applicantsList) == 0) then {
            throw("No one has yet responded to the grant")
        } else {

            let chosenTeamId = FOLD<2>([0,1], 0, hasMoreVotes)
            let teamIdentifier = drop(applicantsList[chosenTeamId], 20)
            WriteSet([
                # Parsed in dAPP to tasks[id].status -> string
                DataEntry("tasks_"+taskId+"_status", "team_chosen"),

                # Parsed in dAPP to tasks[id].performer -> string
                DataEntry("tasks_"+taskId+"_performer", teamIdentifier),

                # Parsed in dAPP to tasks[id].app[teamId].process -> string
                DataEntry("tasks_"+taskId+"_app_"+teamIdentifier+"_process", "can_begin")
            ])
        }
    }
}


@Callable(i)
func startWork(taskId: String) = {
    let teamIdentifier = tryGetString("tasks_"+taskId+"_performer")
    if (tryGetString("tasks_"+taskId+"_status") != "team_chosen") then {
        throw("team is not choosen")
    } else {
        if (i.caller.toString() != tryGetString("tasks_"+taskId+"_app_"+teamIdentifier+"_leader")) then {
            throw("team leader only")
        } else {
            WriteSet([
                # Parsed in dAPP to tasks[id].status -> string
                DataEntry("tasks_"+taskId+"_status", "work_started"),

                # Parsed in dAPP to tasks[id].app[teamId].process -> string
                DataEntry("tasks_"+taskId+"_app_"+teamIdentifier+"_process", "work_started")
            ])
        }
    }
}


@Callable(i)
func acceptWorkResult(taskId: String) = {
    if (!isGroupMember(i.caller)) then {
        throw("grants working group access only")
    } else {
        let rewardAmount = tryGetInteger("tasks_"+taskId+"_reward")
        let teamIdentifier = this.getStringValue("tasks_"+taskId+"_performer")
        let teamAddress = this.getStringValue("tasks_"+taskId+"_app_"+teamIdentifier+"_leader")
        ScriptResult(
            WriteSet([
                # Parsed in dAPP to tasks[id].status -> string
                DataEntry("tasks_"+taskId+"_status", "work_finished"),

                # Parsed in dAPP to tasks[id].app[teamId].process -> string
                DataEntry("tasks_"+taskId+"_app_"+teamIdentifier+"_process", "work_finished")
            ]),
            TransferSet([
                ScriptTransfer(teamAddress.addressFromStringValue(), rewardAmount, unit)
            ])
        )
    }
}
